STACK SEGMENT STACK
    DW 64 DUP(?)
STACK ENDS

DATA SEGMENT 
DATAS DB 35
DB 30
DB 59
DB 75
DB 91
DB 75
DB 58
DB 79
DB 44
DB 80
DB 60
DB 75
DB 47
DB 83
DB 81
DB 66
DB 81
DB 31
DB 18
DB 84
DB 48
DB 15
DB 85
DB 35
DB 93
DB 40
DB 84
DB 51
DB 87
DB 88
DB 21
DB 38
DB 30
DB 96
DB 33
DB 42
DB 46
DB 23
DB 67
DB 20
DB 25
DB 29
DB 46
DB 78
DB 20
DB 57
DB 64
DB 80
DB 98
DB 73
DB 10
DB 13
DB 21
DB 88
DB 28
DB 44
DB 45
DB 38
DB 99
DB 26
DB 45
DB 60
DB 97
DB 56
DB 39
DB 79
DB 72
DB 90
DB 90
DB 72
DB 94
DB 32
DB 98
DB 52
DB 31
DB 25
DB 47
DB 80
DB 29
DB 76
BUFFER DB 4 DUP(0)
DATA ENDS

CODE SEGMENT
    ASSUME CS:CODE, DS:DATA

START:  MOV AX, DATA
        MOV DS, AX
        MOV SI, OFFSET DATAS
        LEA DI, BUFFER
        MOV CX, 80        
LOOPS:  
        MOV AL, [SI]
        INC SI
        CMP AL, 90
        JB NEXT1
        INC BYTE PTR [DI]
        LOOP LOOPS
        JMP ENDLOOP 

NEXT1:
        CMP AL, 70
        JB NEXT2
        INC BYTE PTR [DI+1]
        LOOP LOOPS
        JMP ENDLOOP

NEXT2:
        CMP AL, 60
        JB NEXT3
        INC BYTE PTR [DI+2]
        LOOP LOOPS
        JMP ENDLOOP

NEXT3:
        INC BYTE PTR [DI+3]
        LOOP LOOPS

endloop:
        JMP endloop
CODE    ENDS
        END START 
;½á¹û´æÈë0718:0050